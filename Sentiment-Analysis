{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8905269,"sourceType":"datasetVersion","datasetId":5354114},{"sourceId":8946663,"sourceType":"datasetVersion","datasetId":5383807}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/sanchris/sentiment-analysis?scriptVersionId=188136366\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"pip install pandas langid\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:36:55.697888Z","iopub.execute_input":"2024-07-13T18:36:55.698576Z","iopub.status.idle":"2024-07-13T18:37:07.832221Z","shell.execute_reply.started":"2024-07-13T18:36:55.698537Z","shell.execute_reply":"2024-07-13T18:37:07.830817Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport langid\nfrom textblob import TextBlob\nimport re\nimport nltk\nfrom nltk.corpus import wordnet\nfrom nltk.corpus import stopwords\nfrom nltk.stem import PorterStemmer\nfrom nltk.stem import PorterStemmer, WordNetLemmatizer\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:07.83476Z","iopub.execute_input":"2024-07-13T18:37:07.835076Z","iopub.status.idle":"2024-07-13T18:37:07.841442Z","shell.execute_reply.started":"2024-07-13T18:37:07.835048Z","shell.execute_reply":"2024-07-13T18:37:07.840471Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"nltk.download('stopwords')\nnltk.download('punkt')\nnltk.download('wordnet')\nnltk.download('omw-1.4')\n\nnltk.data.path.append('/path/to/nltk_data')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:07.842518Z","iopub.execute_input":"2024-07-13T18:37:07.84277Z","iopub.status.idle":"2024-07-13T18:37:07.859602Z","shell.execute_reply.started":"2024-07-13T18:37:07.842749Z","shell.execute_reply":"2024-07-13T18:37:07.858752Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Load your CSV files\ndf = pd.read_csv('/kaggle/input/i3-10100f-review/review_i3-10100f.csv')\nprint(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:07.860751Z","iopub.execute_input":"2024-07-13T18:37:07.86116Z","iopub.status.idle":"2024-07-13T18:37:07.895432Z","shell.execute_reply.started":"2024-07-13T18:37:07.861129Z","shell.execute_reply":"2024-07-13T18:37:07.89458Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to detect language using langid\ndef detect_language(text):\n    try:\n        lang, _ = langid.classify(text)\n        return lang\n    except:\n        return None","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:07.897654Z","iopub.execute_input":"2024-07-13T18:37:07.89794Z","iopub.status.idle":"2024-07-13T18:37:07.902841Z","shell.execute_reply.started":"2024-07-13T18:37:07.897916Z","shell.execute_reply":"2024-07-13T18:37:07.901538Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply the language detection\ndf['language'] = df['reviewDescription'].apply(detect_language)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:07.90389Z","iopub.execute_input":"2024-07-13T18:37:07.904368Z","iopub.status.idle":"2024-07-13T18:37:08.27171Z","shell.execute_reply.started":"2024-07-13T18:37:07.904341Z","shell.execute_reply":"2024-07-13T18:37:08.270368Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Filter for the desired language, e.g., English\ndf = df[df['language'] == 'en']","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:08.273386Z","iopub.execute_input":"2024-07-13T18:37:08.274425Z","iopub.status.idle":"2024-07-13T18:37:08.280952Z","shell.execute_reply.started":"2024-07-13T18:37:08.274376Z","shell.execute_reply":"2024-07-13T18:37:08.27987Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to correct spelling\ndef correct_spelling(text):\n    return str(TextBlob(text).correct())","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:08.282612Z","iopub.execute_input":"2024-07-13T18:37:08.283356Z","iopub.status.idle":"2024-07-13T18:37:08.291324Z","shell.execute_reply.started":"2024-07-13T18:37:08.283307Z","shell.execute_reply":"2024-07-13T18:37:08.289844Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply spelling correction\ndf['corrected_review'] = df['reviewDescription'].apply(correct_spelling)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:37:08.29306Z","iopub.execute_input":"2024-07-13T18:37:08.293762Z","iopub.status.idle":"2024-07-13T18:38:00.152392Z","shell.execute_reply.started":"2024-07-13T18:37:08.293731Z","shell.execute_reply":"2024-07-13T18:38:00.151577Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to remove emoticons and non-ASCII characters\ndef remove_emoticons(text):\n    # Remove emoticons\n    text = re.sub(r'[\\U00010000-\\U0010ffff]', '', text)\n    # Remove non-ASCII characters\n    text = re.sub(r'[^\\x00-\\x7f]',r'', text)\n    return text","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.153606Z","iopub.execute_input":"2024-07-13T18:38:00.153956Z","iopub.status.idle":"2024-07-13T18:38:00.159279Z","shell.execute_reply.started":"2024-07-13T18:38:00.153924Z","shell.execute_reply":"2024-07-13T18:38:00.158402Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Apply removal\ndf['cleaned_review'] = df['corrected_review'].apply(remove_emoticons)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.160364Z","iopub.execute_input":"2024-07-13T18:38:00.160638Z","iopub.status.idle":"2024-07-13T18:38:00.173494Z","shell.execute_reply.started":"2024-07-13T18:38:00.16061Z","shell.execute_reply":"2024-07-13T18:38:00.172768Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to remove stopwords\nstop_words = set(stopwords.words('english'))\n\ndef remove_stopwords(text):\n    words = text.split()\n    filtered_words = [word for word in words if word.lower() not in stop_words]\n    return ' '.join(filtered_words)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.174592Z","iopub.execute_input":"2024-07-13T18:38:00.174854Z","iopub.status.idle":"2024-07-13T18:38:00.18635Z","shell.execute_reply.started":"2024-07-13T18:38:00.174831Z","shell.execute_reply":"2024-07-13T18:38:00.185485Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['cleaned_review'] = df['cleaned_review'].apply(remove_stopwords)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.187327Z","iopub.execute_input":"2024-07-13T18:38:00.187579Z","iopub.status.idle":"2024-07-13T18:38:00.19799Z","shell.execute_reply.started":"2024-07-13T18:38:00.187557Z","shell.execute_reply":"2024-07-13T18:38:00.19712Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"stemmer = PorterStemmer()\n\ndef stem_words(text):\n    words = text.split()\n    stemmed_words = [stemmer.stem(word) for word in words]\n    return ' '.join(stemmed_words)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.201875Z","iopub.execute_input":"2024-07-13T18:38:00.202128Z","iopub.status.idle":"2024-07-13T18:38:00.209129Z","shell.execute_reply.started":"2024-07-13T18:38:00.202106Z","shell.execute_reply":"2024-07-13T18:38:00.208253Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['stemmed_review'] = df['cleaned_review'].apply(stem_words)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.210228Z","iopub.execute_input":"2024-07-13T18:38:00.210729Z","iopub.status.idle":"2024-07-13T18:38:00.289795Z","shell.execute_reply.started":"2024-07-13T18:38:00.210698Z","shell.execute_reply":"2024-07-13T18:38:00.28895Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['cleaned_review'] = df['cleaned_review'].str.replace(r'\\bcup\\b', 'CPU', regex=True)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.290907Z","iopub.execute_input":"2024-07-13T18:38:00.291643Z","iopub.status.idle":"2024-07-13T18:38:00.297236Z","shell.execute_reply.started":"2024-07-13T18:38:00.291612Z","shell.execute_reply":"2024-07-13T18:38:00.296324Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.298157Z","iopub.execute_input":"2024-07-13T18:38:00.298444Z","iopub.status.idle":"2024-07-13T18:38:00.317711Z","shell.execute_reply.started":"2024-07-13T18:38:00.298422Z","shell.execute_reply":"2024-07-13T18:38:00.316842Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"def split_into_lists(text):\n    word_list = text.split()\n    return [[word] for word in word_list]\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.31871Z","iopub.execute_input":"2024-07-13T18:38:00.31899Z","iopub.status.idle":"2024-07-13T18:38:00.324952Z","shell.execute_reply.started":"2024-07-13T18:38:00.318968Z","shell.execute_reply":"2024-07-13T18:38:00.324044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['cleaned_review2'] = df['cleaned_review'].apply(lambda x: split_into_lists(x))","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.32594Z","iopub.execute_input":"2024-07-13T18:38:00.326234Z","iopub.status.idle":"2024-07-13T18:38:00.335784Z","shell.execute_reply.started":"2024-07-13T18:38:00.326204Z","shell.execute_reply":"2024-07-13T18:38:00.334862Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom textblob import TextBlob\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics import classification_report\nfrom imblearn.pipeline import Pipeline as ImbPipeline\nfrom imblearn.over_sampling import SMOTE\n\n# Ensure 'rating' column is correctly formatted\ndf['ratingScore'] = pd.to_numeric(df['ratingScore'], errors='coerce')\n\n# Drop any rows with NaN ratings\ndf = df.dropna(subset=['ratingScore'])\n\n# Plot distribution of ratings\nsns.countplot(x='ratingScore', data=df)\nplt.show()\n\n# Create sentiment labels if they don't exist\nif 'sentiment' not in df.columns:\n    def get_sentiment(review):\n        analysis = TextBlob(review)\n        if analysis.sentiment.polarity > 0:\n            return 'positive'\n        elif analysis.sentiment.polarity < 0:\n            return 'negative'\n        else:\n            return 'neutral'\n\n    df['sentiment'] = df['cleaned_review'].apply(get_sentiment)\n\n# Check class distribution\nprint(df['sentiment'].value_counts())\n\n# Split data into training and test sets before vectorization\nX_train, X_test, y_train, y_test = train_test_split(df['cleaned_review'], df['sentiment'], test_size=0.2, random_state=42)\n\n# Model pipeline including SMOTE\nmodel = ImbPipeline([\n    ('tfidf', TfidfVectorizer()),\n    ('smote', SMOTE(random_state=42)),\n    ('clf', MultinomialNB())\n])\n\n# Train and evaluate model\nmodel.fit(X_train, y_train)\npredictions = model.predict(X_test)\nprint(classification_report(y_test, predictions, zero_division=1))","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.3369Z","iopub.execute_input":"2024-07-13T18:38:00.337188Z","iopub.status.idle":"2024-07-13T18:38:00.635347Z","shell.execute_reply.started":"2024-07-13T18:38:00.33714Z","shell.execute_reply":"2024-07-13T18:38:00.634553Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Distribution of reviews per geo\ngeo_counts = df['country'].value_counts()\nprint(geo_counts)\n\n# Plot distribution of reviews per geo\nplt.figure(figsize=(12, 6))\nsns.countplot(y='country', data=df, order=geo_counts.index)\nplt.title('Distribution of Reviews per Geo')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.637193Z","iopub.execute_input":"2024-07-13T18:38:00.637882Z","iopub.status.idle":"2024-07-13T18:38:00.91407Z","shell.execute_reply.started":"2024-07-13T18:38:00.637834Z","shell.execute_reply":"2024-07-13T18:38:00.912908Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['date'] = pd.to_datetime(df['date'], format='%Y-%m-%d')\n\n# Display basic information to verify\nprint(df.info())\nprint(df.head())","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.915708Z","iopub.execute_input":"2024-07-13T18:38:00.916472Z","iopub.status.idle":"2024-07-13T18:38:00.956322Z","shell.execute_reply.started":"2024-07-13T18:38:00.916429Z","shell.execute_reply":"2024-07-13T18:38:00.955079Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Distribution of reviews over time (monthly)\ndf['month_year'] = df['date'].dt.to_period('M')\nmonthly_reviews = df['month_year'].value_counts().sort_index()\nmonthly_reviews.plot(kind='bar', figsize=(14, 7))\nplt.title('Distribution of Reviews Over Time (Monthly)')\nplt.xlabel('Month-Year')\nplt.ylabel('Number of Reviews')\nplt.show()\n\n# Distribution of reviews over time (yearly)\ndf['year'] = df['date'].dt.to_period('Y')\nyearly_reviews = df['year'].value_counts().sort_index()\nyearly_reviews.plot(kind='bar', figsize=(14, 7))\nplt.title('Distribution of Reviews Over Time (Yearly)')\nplt.xlabel('Year')\nplt.ylabel('Number of Reviews')\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:00.957875Z","iopub.execute_input":"2024-07-13T18:38:00.958585Z","iopub.status.idle":"2024-07-13T18:38:01.695721Z","shell.execute_reply.started":"2024-07-13T18:38:00.958542Z","shell.execute_reply":"2024-07-13T18:38:01.694827Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Average rating over time (monthly)\nmonthly_avg_rating = df.groupby('month_year')['ratingScore'].mean()\nmonthly_avg_rating.plot(kind='line', figsize=(14, 7))\nplt.title('Average Rating Over Time (Monthly)')\nplt.xlabel('Month-Year')\nplt.ylabel('Average Rating')\nplt.show()\n\n# Average rating over time (yearly)\nyearly_avg_rating = df.groupby('year')['ratingScore'].mean()\nyearly_avg_rating.plot(kind='line', figsize=(14, 7))\nplt.title('Average Rating Over Time (Yearly)')\nplt.xlabel('Year')\nplt.ylabel('Average Rating')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:01.697018Z","iopub.execute_input":"2024-07-13T18:38:01.697354Z","iopub.status.idle":"2024-07-13T18:38:02.313984Z","shell.execute_reply.started":"2024-07-13T18:38:01.69732Z","shell.execute_reply":"2024-07-13T18:38:02.313077Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Assuming sentiment column exists and contains 'positive', 'neutral', 'negative'\n# Convert sentiment to numerical values for analysis\ndf['sentiment'] = df['sentiment'].map({'positive': 1, 'neutral': 0, 'negative': -1})\n\n# Average sentiment over time (monthly)\nmonthly_avg_sentiment = df.groupby('month_year')['sentiment'].mean()\nmonthly_avg_sentiment.plot(kind='line', figsize=(14, 7))\nplt.title('Average Sentiment Over Time (Monthly)')\nplt.xlabel('Month-Year')\nplt.ylabel('Average Sentiment')\nplt.show()\n\n# Average sentiment over time (yearly)\nyearly_avg_sentiment = df.groupby('year')['sentiment'].mean()\nyearly_avg_sentiment.plot(kind='line', figsize=(14, 7))\nplt.title('Average Sentiment Over Time (Yearly)')\nplt.xlabel('Year')\nplt.ylabel('Average Sentiment')\nplt.show()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:02.31504Z","iopub.execute_input":"2024-07-13T18:38:02.31532Z","iopub.status.idle":"2024-07-13T18:38:02.907632Z","shell.execute_reply.started":"2024-07-13T18:38:02.315297Z","shell.execute_reply":"2024-07-13T18:38:02.906634Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# TF-IDF Vectorizer\nvectorizer = TfidfVectorizer(max_features=1000, ngram_range=(1, 2))\ntfidf_matrix = vectorizer.fit_transform(df['cleaned_review'])\nfeatures = vectorizer.get_feature_names_out()\n\n# Display key features\nprint(features)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:02.908939Z","iopub.execute_input":"2024-07-13T18:38:02.909306Z","iopub.status.idle":"2024-07-13T18:38:02.939568Z","shell.execute_reply.started":"2024-07-13T18:38:02.909241Z","shell.execute_reply":"2024-07-13T18:38:02.9386Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.decomposition import TruncatedSVD\n\n# Decompose TF-IDF matrix to find key topics\nsvd = TruncatedSVD(n_components=10, random_state=42)\nsvd_matrix = svd.fit_transform(tfidf_matrix)\nterms = vectorizer.get_feature_names_out()\n\n# Display top terms in each topic\nfor i, component in enumerate(svd.components_):\n    terms_in_topic = [terms[x] for x in component.argsort()[-10:]]\n    print(f\"Topic {i}: {terms_in_topic}\")\n\n# Sentiment analysis per topic\ndf['topic'] = svd_matrix.argmax(axis=1)\nsentiment_analysis = df.groupby(['topic', 'sentiment']).size().unstack(fill_value=0)\nprint(sentiment_analysis)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:02.940723Z","iopub.execute_input":"2024-07-13T18:38:02.941404Z","iopub.status.idle":"2024-07-13T18:38:02.969341Z","shell.execute_reply.started":"2024-07-13T18:38:02.941371Z","shell.execute_reply":"2024-07-13T18:38:02.968213Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Function to generate recommendations\ndef generate_recommendations(sentiment_analysis):\n    recommendations = []\n    for topic, sentiments in sentiment_analysis.iterrows():\n        pos_count = sentiments.get('positive', 0)\n        neg_count = sentiments.get('negative', 0)\n        if neg_count > pos_count:\n            recommendations.append(f\"Topic {topic} needs improvement.\")\n        elif pos_count > neg_count:\n            recommendations.append(f\"Topic {topic} is well-received.\")\n        else:\n            recommendations.append(f\"Topic {topic} is mixed.\")\n    return recommendations\n\n# Generate recommendations\nrecommendations = generate_recommendations(sentiment_analysis)\nfor rec in recommendations:\n    print(rec)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:02.970691Z","iopub.execute_input":"2024-07-13T18:38:02.971095Z","iopub.status.idle":"2024-07-13T18:38:02.983454Z","shell.execute_reply.started":"2024-07-13T18:38:02.971064Z","shell.execute_reply":"2024-07-13T18:38:02.982109Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# Replace 'transformed_file.csv' with the desired filename for the transformed CSV\ndf.to_csv('result.csv', index=False)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:02.984831Z","iopub.execute_input":"2024-07-13T18:38:02.985624Z","iopub.status.idle":"2024-07-13T18:38:03.014904Z","shell.execute_reply.started":"2024-07-13T18:38:02.985592Z","shell.execute_reply":"2024-07-13T18:38:03.013822Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"dt = pd.read_csv('/kaggle/working/result.csv')\nprint(dt)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T18:38:03.016181Z","iopub.execute_input":"2024-07-13T18:38:03.017066Z","iopub.status.idle":"2024-07-13T18:38:03.060251Z","shell.execute_reply.started":"2024-07-13T18:38:03.017032Z","shell.execute_reply":"2024-07-13T18:38:03.05913Z"},"trusted":true},"execution_count":null,"outputs":[]}]}